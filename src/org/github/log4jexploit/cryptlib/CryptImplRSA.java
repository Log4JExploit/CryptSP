/*
 * Author: Log4JExploit
 * Note: This comment can be removed (see in LICENSE file)
 */

package org.github.log4jexploit.cryptlib;

import javax.crypto.Cipher;
import java.math.BigInteger;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAKeyGenParameterSpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Random;


@Algorithm(name = "RSA", type = Algorithm.Type.ASYMMETRIC, keySizes = {1024, 2048, 4096}, mode = "RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING")
public class CryptImplRSA extends CryptAsymmetric {

    private static final String RSA_MODE = "RSA/ECB/OAEP WITH SHA-256 AND MGF1 PADDING"
            .replace(" ","");

    private PublicKey publicKey;
    private PrivateKey privateKey;
    private Random rand;


    protected CryptImplRSA(int keySize) {
        super(keySize);
    }


    @Override
    public void initialize() {
        this.rand = new SecureRandom();
    }

    @Override
    public byte[] encrypt(byte[] data) {
        try {
            Cipher encrypt = Cipher.getInstance(RSA_MODE);
            encrypt.init(Cipher.ENCRYPT_MODE, publicKey, (SecureRandom) rand);
            return encrypt.doFinal(data);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public byte[] decrypt(byte[] data) {
        try {
            Cipher decrypt = Cipher.getInstance(RSA_MODE);
            decrypt.init(Cipher.DECRYPT_MODE, privateKey, (SecureRandom) rand);
            return decrypt.doFinal(data);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void importKeyPair(CryptAsymmetricKeyPair keyPair) {
        try {
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            this.privateKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(keyPair.getPrivateKeyBytes()));

            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyPair.getPublicKeyBytes());
            this.publicKey = keyFactory.generatePublic(publicKeySpec);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void generateKeyPair() {
        try {
            KeyPairGenerator gen = KeyPairGenerator.getInstance("RSA");
            gen.initialize(new RSAKeyGenParameterSpec(super.getKeySize(), BigInteger.valueOf(65537)), new SecureRandom());
            KeyPair keys = gen.generateKeyPair();
            this.keyPair = new CryptAsymmetricKeyPair(keys.getPublic().getEncoded(), keys.getPrivate().getEncoded());
            this.privateKey = keys.getPrivate();
            this.publicKey = keys.getPublic();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
