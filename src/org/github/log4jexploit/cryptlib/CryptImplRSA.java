package org.github.log4jexploit.cryptlib;

import org.github.log4jexploit.cryptlib.CryptAsymmetric;
import org.github.log4jexploit.cryptlib.CryptAsymmetricKeyPair;

import javax.crypto.SecretKey;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class CryptImplRSA extends CryptAsymmetric {


    protected CryptImplRSA(int keySize) {
        super(keySize);
    }

    @Override
    public void importKeyPair(CryptAsymmetricKeyPair keyPair) {
        try {
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(keyPair.getPrivateKeyBytes());
            PrivateKey privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);
            SecretKey any;
            any.getEncoded()
            PublicKey publicKey = keyFactory.generatePublic(new PKCS8EncodedKeySpec(keyPair.getPublicKeyBytes()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void generate() {

    }
}
