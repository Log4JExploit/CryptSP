package org.github.log4jexploit.cryptlib;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.util.Base64;

@Algorithm(name = "AES_GCM", type = Algorithm.Type.SYMMETRIC, keySizes = {128, 192, 256})
class CryptImplAES extends CryptSymmetric {

    private static final String AES_MODE = "AES/GCM/NoPadding";

    private SecretKey key;
    private GCMParameterSpec keySpec;


    protected CryptImplAES(int keySize) {
        super(keySize);
    }


    @Override
    public byte[] encrypt(byte[] data) {
        try {
            Cipher cipherEncrypt = Cipher.getInstance(AES_MODE);
            cipherEncrypt.init(Cipher.ENCRYPT_MODE, this.key, generateIV());
            
            byte[] encrypted = cipherEncrypt.doFinal(data);
            byte[] buffer = new byte[encrypted.length+16];

            System.arraycopy(this.keySpec.getIV(), 0, buffer, 0, 16);
            System.arraycopy(encrypted, 0, buffer, 16, encrypted.length);

            return buffer;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public byte[] decrypt(byte[] data) {
        try {
            byte[] iv = new byte[16];
            byte[] encrypted = new byte[data.length-16];
            System.arraycopy(data,0, iv,0,16);
            System.arraycopy(data,16, encrypted,0, encrypted.length);

            this.keySpec = new GCMParameterSpec(128, iv);

            Cipher cipherDecrypt = Cipher.getInstance(AES_MODE);
            cipherDecrypt.init(Cipher.DECRYPT_MODE, this.key, keySpec);
            return cipherDecrypt.doFinal(encrypted);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void generateKey() {
        try {
            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(getKeySize());
            this.key = keyGenerator.generateKey();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private GCMParameterSpec generateIV() {
        byte[] iv = new byte[16];
        SecureRandom random = new SecureRandom();
        random.nextBytes(iv);
        this.keySpec = new GCMParameterSpec(128, iv);
        return this.keySpec;
    }


    public void importKey(CryptSymmetricKey key) {
        try {
            String keyString = key.getEncoded().split(":")[0];
            byte[] keyBytes = Base64.getDecoder().decode(keyString);
            SecretKeyFactory factory = SecretKeyFactory.getInstance("AES");
            
            this.key = factory.generateSecret(new SecretKeySpec(keyBytes, factory.getAlgorithm()));
        } catch (Exception e) {
            throw new RuntimeException();
        }
    }

    public CryptSymmetricKey exportKey() {
        return new CryptSymmetricKey(Base64.getEncoder().encodeToString(key.getEncoded()));
    }
}
