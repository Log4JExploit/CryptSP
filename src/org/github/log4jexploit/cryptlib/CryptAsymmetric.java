/*
 * Author: Log4JExploit
 * Note: This comment can be removed (see in LICENSE file)
 */

package org.github.log4jexploit.cryptlib;


import java.util.Base64;

public abstract class CryptAsymmetric extends Decryptable {

    protected CryptAsymmetricKeyPair keyPair;


    protected CryptAsymmetric(int keySize) {
        super(keySize);
    }


    public CryptAsymmetricKeyPair exportKeyPair() {
        return CryptAsymmetricKeyPair.clone(this.keyPair);
    }

    public abstract void importKeyPair(CryptAsymmetricKeyPair keyPair);

    public abstract void generateKeyPair();

    public static class CryptAsymmetricKeyPair {

        private final byte[] publicKey;
        private final byte[] privateKey;

        public CryptAsymmetricKeyPair(String encodedPublicKey, String encodedPrivateKey) {
            this.publicKey = Base64.getDecoder().decode(encodedPublicKey);
            this.privateKey = Base64.getDecoder().decode(encodedPrivateKey);
        }

        protected CryptAsymmetricKeyPair(byte[] publicKey, byte[] privateKey) {
            this.publicKey = publicKey;
            this.privateKey = privateKey;
        }

        public byte[] getPublicKeyBytes() {
            return publicKey;
        }

        public byte[] getPrivateKeyBytes() {
            return privateKey;
        }

        public String getPublicKeyEncoded() {
            return Base64.getEncoder().encodeToString(this.publicKey);
        }

        public String getPrivateKeyEncoded() {
            return Base64.getEncoder().encodeToString(this.privateKey);
        }

        public static CryptAsymmetricKeyPair clone(CryptAsymmetricKeyPair keyPair) {
            return new CryptAsymmetricKeyPair(keyPair.publicKey.clone(), keyPair.privateKey.clone());
        }
    }

}
