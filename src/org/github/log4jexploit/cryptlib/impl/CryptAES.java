package org.github.log4jexploit.cryptlib.impl;

import org.github.log4jexploit.cryptlib.CryptSymmetric;

import javax.crypto.*;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.util.Base64;

@Algorithm(name = "AES_GCM", type = Algorithm.Type.SYMMETRIC, keySizes = {128, 192, 256})
class CryptAES extends CryptSymmetric {

    private static final String AES_MODE = "AES/GCM/NoPadding";

    private SecretKey key;
    private byte[] iv;
    private GCMParameterSpec keySpec;

    private Cipher cipherEncrypt;
    private Cipher cipherDecrypt;

    public CryptAES(int keySize) {
        super(keySize);
    }

    @Override
    public byte[] encrypt(byte[] data) {
        try {
            cipherEncrypt = Cipher.getInstance(AES_MODE);
            cipherEncrypt.init(Cipher.ENCRYPT_MODE, this.key, keySpec);
            return cipherEncrypt.doFinal(data);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public byte[] decrypt(byte[] data) {
        try {
            cipherDecrypt = Cipher.getInstance(AES_MODE);
            cipherDecrypt.init(Cipher.DECRYPT_MODE, this.key, keySpec);
            return cipherDecrypt.doFinal(data);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void generateKey() {
        try {
            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(this.getKeySize());
            this.key = keyGenerator.generateKey();
            this.iv = new byte[16];
            SecureRandom random = new SecureRandom();
            random.nextBytes(this.iv);

            this.keySpec = new GCMParameterSpec(128, this.iv);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void importKey(String encodedKey) {
        try {
            byte[] keyBytes = Base64.getDecoder().decode(encodedKey);
            SecretKeyFactory factory = SecretKeyFactory.getInstance("AES");
            this.key = factory.generateSecret(new SecretKeySpec(keyBytes, factory.getAlgorithm()));
        } catch (Exception e) {
            throw new RuntimeException();
        }
    }

    @Override
    public String exportKey() {
        throw new UnsupportedOperationException();
    }
}
